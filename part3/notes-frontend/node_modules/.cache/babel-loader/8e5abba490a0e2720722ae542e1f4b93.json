{"ast":null,"code":"var _jsxFileName = \"/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/components/Notes.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleImportanceOf } from \"../reducers/noteReducer\";\nimport noteService from \"../services/notes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Note = ({\n  note,\n  handleClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: handleClick,\n    children: [note.content, /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: [\" \", note.important ? \"important\" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Note;\n\nconst Notes = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const notes = useSelector(({\n    filter,\n    notes\n  }) => {\n    if (filter === \"ALL\") {\n      return notes;\n    }\n\n    return filter === \"IMPORTANT\" ? notes.filter(note => note.important) : notes.filter(note => !note.important);\n  });\n\n  const handleClick = async (id, note) => {\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    const updatedNote = await noteService.update(id, changedNote);\n    dispatch(toggleImportanceOf(updatedNote));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n      note: note,\n      handleClick: () => handleClick(note.id, note)\n    }, note.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"E+izF8dZ+qIXvXLmwmZPZjv7l3I=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c2 = Notes;\nexport default Notes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Note\");\n$RefreshReg$(_c2, \"Notes\");","map":{"version":3,"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/components/Notes.js"],"names":["React","useDispatch","useSelector","toggleImportanceOf","noteService","Note","note","handleClick","content","important","Notes","dispatch","notes","filter","id","changedNote","updatedNote","update","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA2B;AACtC,sBACE;AAAI,IAAA,OAAO,EAAEA,WAAb;AAAA,eACGD,IAAI,CAACE,OADR,eAEE;AAAA,sBAAUF,IAAI,CAACG,SAAL,GAAiB,WAAjB,GAA+B,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;KAAMJ,I;;AASN,MAAMK,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,KAAK,GAAGV,WAAW,CAAC,CAAC;AAAEW,IAAAA,MAAF;AAAUD,IAAAA;AAAV,GAAD,KAAuB;AAC/C,QAAKC,MAAM,KAAK,KAAhB,EAAuB;AACrB,aAAOD,KAAP;AACD;;AACD,WAAOC,MAAM,KAAK,WAAX,GACHD,KAAK,CAACC,MAAN,CAAaP,IAAI,IAAIA,IAAI,CAACG,SAA1B,CADG,GAEHG,KAAK,CAACC,MAAN,CAAaP,IAAI,IAAI,CAACA,IAAI,CAACG,SAA3B,CAFJ;AAGD,GAPwB,CAAzB;;AASA,QAAMF,WAAW,GAAG,OAAOO,EAAP,EAAWR,IAAX,KAAoB;AACtC,UAAMS,WAAW,GAAG,EAClB,GAAGT,IADe;AAElBG,MAAAA,SAAS,EAAE,CAACH,IAAI,CAACG;AAFC,KAApB;AAIA,UAAMO,WAAW,GAAG,MAAMZ,WAAW,CAACa,MAAZ,CAAmBH,EAAnB,EAAuBC,WAAvB,CAA1B;AACAJ,IAAAA,QAAQ,CAACR,kBAAkB,CAACa,WAAD,CAAnB,CAAR;AACD,GAPD;;AASA,sBACE;AAAA,cACGJ,KAAK,CAACM,GAAN,CAAUZ,IAAI,iBACb,QAAC,IAAD;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,WAAW,EAAE,MAAMC,WAAW,CAACD,IAAI,CAACQ,EAAN,EAAUR,IAAV;AAHhC,OACOA,IAAI,CAACQ,EADZ;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/BD;;GAAMJ,K;UACaT,W,EACHC,W;;;MAFVQ,K;AAiCN,eAAeA,KAAf","sourcesContent":["import React from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { toggleImportanceOf } from \"../reducers/noteReducer\"\nimport noteService from \"../services/notes\"\n\nconst Note = ({ note, handleClick }) => {\n  return(\n    <li onClick={handleClick}>\n      {note.content}\n      <strong> {note.important ? \"important\" : \"\"}</strong>\n    </li>\n  )\n}\n\nconst Notes = () => {\n  const dispatch = useDispatch()\n  const notes = useSelector(({ filter, notes }) => {\n    if ( filter === \"ALL\") {\n      return notes\n    }\n    return filter === \"IMPORTANT\"\n      ? notes.filter(note => note.important)\n      : notes.filter(note => !note.important)\n  })\n\n  const handleClick = async (id, note) => {\n    const changedNote = {\n      ...note,\n      important: !note.important\n    }\n    const updatedNote = await noteService.update(id, changedNote)\n    dispatch(toggleImportanceOf(updatedNote))\n  }\n\n  return(\n    <ul>\n      {notes.map(note =>\n        <Note\n          key={note.id}\n          note={note}\n          handleClick={() => handleClick(note.id, note)}\n        />\n      )}\n    </ul>\n  )\n}\n\nexport default Notes"]},"metadata":{},"sourceType":"module"}