{"ast":null,"code":"const initialState = [{\n  content: \"reducer defines how redux store works\",\n  important: true,\n  id: 1\n}, {\n  content: \"state of store can contain any data\",\n  important: false,\n  id: 2\n}];\n\nconst noteReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"NEW_NOTE\":\n      return [...state, action.data];\n\n    case \"TOGGLE_IMPORTANCE\":\n      {\n        const id = action.data.id;\n        const noteToChange = state.find(n => n.id === id);\n        const changedNote = { ...noteToChange,\n          important: !noteToChange.important\n        };\n        return state.map(note => note.id !== id ? note : changedNote);\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst generateId = () => Math.floor(Math.random() * 1000000);\n\nexport const createNote = content => {\n  return {\n    type: \"NEW_NOTE\",\n    data: {\n      content,\n      important: false,\n      id: generateId()\n    }\n  };\n};\nexport const toggleImportanceOf = id => {\n  return {\n    type: \"TOGGLE_IMPORTANCE\",\n    data: {\n      id\n    }\n  };\n};\nexport default noteReducer;","map":{"version":3,"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/reducers/noteReducer.js"],"names":["initialState","content","important","id","noteReducer","state","action","type","data","noteToChange","find","n","changedNote","map","note","generateId","Math","floor","random","createNote","toggleImportanceOf"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CACnB;AACEC,EAAAA,OAAO,EAAE,uCADX;AAEEC,EAAAA,SAAS,EAAE,IAFb;AAGEC,EAAAA,EAAE,EAAE;AAHN,CADmB,EAMnB;AACEF,EAAAA,OAAO,EAAE,qCADX;AAEEC,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,EAAE,EAAE;AAHN,CANmB,CAArB;;AAcA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAOA,MAAM,CAACC,IAAd;AACA,SAAK,UAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,IAAlB,CAAP;;AACF,SAAK,mBAAL;AAA0B;AACxB,cAAML,EAAE,GAAGG,MAAM,CAACE,IAAP,CAAYL,EAAvB;AACA,cAAMM,YAAY,GAAGJ,KAAK,CAACK,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACR,EAAF,KAASA,EAAzB,CAArB;AACA,cAAMS,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBP,UAAAA,SAAS,EAAE,CAACO,YAAY,CAACP;AAFP,SAApB;AAIA,eAAOG,KAAK,CAACQ,GAAN,CAAUC,IAAI,IACnBA,IAAI,CAACX,EAAL,KAAYA,EAAZ,GAAiBW,IAAjB,GAAwBF,WADnB,CAAP;AAGD;;AACD;AACE,aAAOP,KAAP;AAfF;AAiBD,CAlBD;;AAoBA,MAAMU,UAAU,GAAG,MACjBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CADF;;AAGA,OAAO,MAAMC,UAAU,GAAIlB,OAAD,IAAa;AACrC,SAAO;AACLM,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,IAAI,EAAE;AACJP,MAAAA,OADI;AAEJC,MAAAA,SAAS,EAAE,KAFP;AAGJC,MAAAA,EAAE,EAAEY,UAAU;AAHV;AAFD,GAAP;AAQD,CATM;AAWP,OAAO,MAAMK,kBAAkB,GAAIjB,EAAD,IAAQ;AACxC,SAAO;AACLI,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,IAAI,EAAE;AAAEL,MAAAA;AAAF;AAFD,GAAP;AAID,CALM;AAOP,eAAeC,WAAf","sourcesContent":["const initialState = [\n  {\n    content: \"reducer defines how redux store works\",\n    important: true,\n    id: 1,\n  },\n  {\n    content: \"state of store can contain any data\",\n    important: false,\n    id: 2,\n  },\n]\n\n\nconst noteReducer = (state = initialState, action) => {\n  switch(action.type) {\n  case \"NEW_NOTE\":\n    return [...state, action.data]\n  case \"TOGGLE_IMPORTANCE\": {\n    const id = action.data.id\n    const noteToChange = state.find(n => n.id === id)\n    const changedNote = {\n      ...noteToChange,\n      important: !noteToChange.important\n    }\n    return state.map(note =>\n      note.id !== id ? note : changedNote\n    )\n  }\n  default:\n    return state\n  }\n}\n\nconst generateId = () =>\n  Math.floor(Math.random() * 1000000)\n\nexport const createNote = (content) => {\n  return {\n    type: \"NEW_NOTE\",\n    data: {\n      content,\n      important: false,\n      id: generateId()\n    }\n  }\n}\n\nexport const toggleImportanceOf = (id) => {\n  return {\n    type: \"TOGGLE_IMPORTANCE\",\n    data: { id }\n  }\n}\n\nexport default noteReducer"]},"metadata":{},"sourceType":"module"}