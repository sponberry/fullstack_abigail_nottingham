{"ast":null,"code":"var _jsxFileName = \"/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Note from './components/Note';\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\nimport LoginForm from \"./components/LoginForm\";\nimport NoteForm from \"./components/NoteForm\";\nimport Togglable from \"./components/Togglable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem(\"loggedNoteappUser\");\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      noteService.setToken(user.token);\n    }\n  }, []);\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(updatedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : updatedNote));\n    }).catch(error => {\n      setErrorMessage(`the note '${note.content}' was already deleted from the server.`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  const noteFormRef = useRef();\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const handleLogout = () => {\n    window.localStorage.clear();\n    setUser(null);\n    noteService.setToken(null);\n  };\n\n  const createNote = async noteObject => {\n    noteFormRef.current.toggleVisibility();\n    const addedNote = await noteService.create(noteObject);\n    setNotes(notes.concat(addedNote));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), user === null ? /*#__PURE__*/_jsxDEV(Togglable, {\n      buttonLabel: \"login\",\n      children: /*#__PURE__*/_jsxDEV(LoginForm, {\n        user: user,\n        setUser: user => setUser(user),\n        errorMessage: errorMessage,\n        setErrorMessage: errorMessage => setErrorMessage(errorMessage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [user.name, \" logged in\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          children: \"logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n        buttonLabel: \"new note\",\n        ref: noteFormRef,\n        children: /*#__PURE__*/_jsxDEV(NoteForm, {\n          createNote: createNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"SUfoBwHvJ3rgLBe9vXb9xZZrQtI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/App.js"],"names":["React","useState","useEffect","useRef","Note","Notification","noteService","LoginForm","NoteForm","Togglable","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","user","setUser","getAll","then","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","toggleImportanceOf","id","note","find","n","changedNote","important","update","updatedNote","map","catch","error","content","setTimeout","filter","noteFormRef","notesToShow","handleLogout","clear","createNote","noteObject","current","toggleVisibility","addedNote","create","concat","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Note from './components/Note';\nimport Notification from \"./components/Notification\"\nimport noteService from \"./services/notes\"\nimport LoginForm from \"./components/LoginForm\"\nimport NoteForm from \"./components/NoteForm\"\nimport Togglable from \"./components/Togglable\"\n\nconst App = () => {  \n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [user, setUser] = useState(null)\n\n  useEffect(() => { \n    noteService     \n    .getAll()      \n    .then(initialNotes => {             \n      setNotes(initialNotes)      \n    })  \n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem(\"loggedNoteappUser\")\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important}\n\n    noteService.update(id, changedNote)\n    .then(updatedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : updatedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `the note '${note.content}' was already deleted from the server.`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const noteFormRef = useRef()\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleLogout = () => {\n    window.localStorage.clear()\n    setUser(null)\n    noteService.setToken(null)\n  }\n\n  const createNote = async noteObject => {\n    noteFormRef.current.toggleVisibility()\n    const addedNote = await noteService.create(noteObject)\n    setNotes(notes.concat(addedNote))\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      {user === null\n        ? <Togglable buttonLabel=\"login\">\n            <LoginForm \n              user={user}\n              setUser={(user) => setUser(user)} \n              errorMessage={errorMessage}\n              setErrorMessage={(errorMessage) => setErrorMessage(errorMessage)}\n              />\n          </Togglable>\n        : <div>\n            <p>\n              {user.name} logged in\n              <button onClick={handleLogout}>logout</button>\n            </p> \n            <Togglable buttonLabel=\"new note\" ref={noteFormRef}>\n              <NoteForm\n                createNote={createNote}\n              />\n            </Togglable>\n          </div>\n      }\n\n      <ul>\n        {notesToShow.map(note => \n          <Note \n          key={note.id} \n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)} \n          />\n        )}\n      </ul>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App "]},"metadata":{},"sourceType":"module"}