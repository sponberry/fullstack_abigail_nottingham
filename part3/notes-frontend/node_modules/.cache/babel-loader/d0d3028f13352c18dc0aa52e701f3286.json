{"ast":null,"code":"var _jsxFileName = \"/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useImperativeHandle } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Togglable = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  };\n  const hideWhenVisible = {\n    display: visible ? \"none\" : \"\"\n  };\n  const showWhenVisible = {\n    display: visible ? \"\" : \"none\"\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      children: [props.children, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}, \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$React.forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/abigailnottingham/HTML Projects/fullstack_open/fullstack_an/part3/notes-frontend/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Togglable","forwardRef","props","ref","visible","setVisible","propTypes","buttonLabel","string","isRequired","hideWhenVisible","display","showWhenVisible","toggleVisibility","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,gBAAGJ,KAAK,CAACK,UAAN,SAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEAG,EAAAA,SAAS,CAACM,SAAV,GAAsB;AACpBC,IAAAA,WAAW,EAAER,SAAS,CAACS,MAAV,CAAiBC;AADV,GAAtB;AAIA,QAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEP,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMQ,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEP,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMS,gBAAgB,GAAG,MAAM;AAC7BR,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAN,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLU,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEG,gBAAjB;AAAA,kBACGX,KAAK,CAACK;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,KAAK,EAAEK,eAAZ;AAAA,iBACGV,KAAK,CAACY,QADT,eAEE;AAAQ,QAAA,OAAO,EAAED,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnCiB;AAAA,UAchBf,mBAdgB;AAAA,GAAlB;MAAME,S;AAqCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  Togglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  }\n\n  const hideWhenVisible = { display: visible ? \"none\" : \"\" }\n  const showWhenVisible = { display: visible ? \"\" : \"none\" }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>\n          {props.buttonLabel}\n        </button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>\n          cancel\n        </button>\n      </div>\n    </div>\n  )\n})\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}